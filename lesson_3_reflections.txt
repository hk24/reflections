When would you want to use a remote repository rather than keeping all your work
local?

    - I would use a remotre repository in situations where I will be developing with others or where 
    I am working on a project with frequent commits. Also a project I'd like to share public. 

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    - Adding changes autmatically can add too many changes or give you changes that you don't need present 
    that can effect your work in a negative way. Have it manually lets you chose what changes you want to pull.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

    - Forks let you clone a copy of a repository from another users account right on the GitHub site. This will keep the original users respository "original". Clones lets you copy the repository either from the users account to your local (or github) or you can clone copy in the local. Branchs difference is you are not copying but rather creating an "extention" of a project that you can use in multiple ways. Forks and clones difference is mainly the "approach". For example if you want to work on someone project its better to fork than clone because that way the origin of the project is still visible or "credited" to the original author/maker

What is the benefit of having a copy of the last known state of the remote
stored locally?

    - The benefit is when you modify is you can always go back to the original remote locally. 

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

    - I would save my project files each logical build and send it via email or skype. Right now it might be easier to send through skype and add changes myself (even though this would take more time) because I'm still learning Git and GitHub. Once used to GitHub, this would be the easier way to collaborate. Exchanging through skype would be harder for big projects. 

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

    - Adding a seperate branch is best when you want to work on feature that you are testing out or features you are not confident will work. By making a branch you are playing "safe" and you can switch through the branches or merge any time you are confident that specific branch should be with the master branch. The benefit of working in a master branch only is you only have a number of logical changes and can check through the history of those commits and make changes if needed rather than switching branches and merging. Also it a lot more faster to have one master branch when working on github. 









